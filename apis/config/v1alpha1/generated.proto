/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.pkgserver_dev.pkgserver.apis.config.v1alpha1;

import "github.com/pkgserver-dev/pkgserver/apis/condition/generated.proto";
import "github.com/pkgserver-dev/pkgserver/apis/pkgid/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/pkgserver-dev/pkgserver/apis/config/v1alpha1";

// GitRepository describes a Git repository.
// TODO: authentication methods
message GitRepository {
  // URL specifies the base URL for a given repository for example:
  //   `https://github.com/GoogleCloudPlatform/catalog.git`
  optional string url = 1;

  // Name of the reference (typically a branch) containing the packages. Finalized packages will be committed to this branch (if the repository allows write access). If unspecified, defaults to "main".
  optional string ref = 2;

  // Directory within the Git repository where the packages are stored. If unspecified, defaults to root directory.
  optional string directory = 3;

  // Credentials defines the name of the secret that holds the credentials to connect to a repository
  optional string credentials = 4;
}

// OciRepository describes a repository compatible with the Open Container Registry standard.
message OciRepository {
  // Registry is the address of the OCI registry
  optional string registry = 1;

  // Credentials defines the name of the secret that holds the credentials to connect to the OCI registry
  optional string credentials = 2;
}

// PackageContext defines the context of the Package
message PackageContext {
  // Inputs define the inputs defined for the PackageContext
  // +kubebuilder:pruning:PreserveUnknownFields
  repeated k8s.io.apimachinery.pkg.runtime.RawExtension inputs = 1;

  // Annotations is a key value map to be copied to the PackageContext Annotations.
  map<string, string> annotations = 2;

  // Labels is a key value map to be copied to the PackageContext Labels.
  map<string, string> labels = 3;

  // ReadinessGates define the conditions that need to be acted upon before considering the PackageRevision
  // ready for approval
  repeated github.com.pkgserver_dev.pkgserver.apis.condition.ReadinessGate readinessGates = 4;
}

// +kubebuilder:resource:categories={kform,pkg}
// PackageVariant is the PackageVariant for the PackageVariant API
// +k8s:openapi-gen=true
message PackageVariant {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PackageVariantSpec spec = 2;

  optional PackageVariantStatus status = 3;
}

// +kubebuilder:object:root=true
// PackageVariantList contains a list of PackageVariants
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message PackageVariantList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated PackageVariant items = 2;
}

// PackageVariantSpec defines the desired state of PackageVariant
message PackageVariantSpec {
  // Upstream defines the upstream PackageRevision reference
  optional github.com.pkgserver_dev.pkgserver.apis.pkgid.Upstream upstream = 1;

  // Downstream defines the downstream Package information
  optional github.com.pkgserver_dev.pkgserver.apis.pkgid.Downstream downstream = 2;

  // PackageContext defines the context of the PackageVariant
  optional PackageContext packageContext = 3;

  // +kubebuilder:validation:Enum=adoptExisting;adoptNone;
  // +kubebuilder:default:="adoptNone"
  optional string adoptionPolicy = 4;

  // +kubebuilder:validation:Enum=delete;orphan;
  // +kubebuilder:default:="delete"
  optional string deletionPolicy = 5;
}

// PackageVariantStatus defines the observed state of PackageVariant
message PackageVariantStatus {
  // ConditionedStatus provides the status of the PackageVariant using conditions
  optional github.com.pkgserver_dev.pkgserver.apis.condition.ConditionedStatus conditionedStatus = 1;
}

// +kubebuilder:object:root=true
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="DEPLOYMENT",type=boolean,JSONPath=`.spec.deployment`
// +kubebuilder:printcolumn:name="TYPE",type=string,JSONPath=`.spec.type`
// +kubebuilder:printcolumn:name="ADDRESS",type=string,JSONPath=`.spec['git','oci']['url','registry']`
// +kubebuilder:resource:categories={kform,pkg}
// Repository is the Repository for the Repository API
// +k8s:openapi-gen=true
message Repository {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RepositorySpec spec = 2;

  optional RepositoryStatus status = 3;
}

// +kubebuilder:object:root=true
// RepositoryList contains a list of Repositorys
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message RepositoryList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Repository items = 2;
}

// RepositorySpec defines the desired state of Repository
message RepositorySpec {
  // Type of the repository (i.e. git, OCI)
  // +kubebuilder:validation:Enum=git;oci
  // +kubebuilder:default:="git"
  optional string type = 1;

  // Git repository details. Required if `type` is `git`. Ignored if `type` is not `git`.
  optional GitRepository git = 2;

  // OCI repository details. Required if `type` is `oci`. Ignored if `type` is not `oci`.
  optional OciRepository oci = 3;

  // The repository is a deployment repository;
  // When set to true this is considered a WET package; when false this is a DRY package
  optional bool deployment = 4;
}

// RepositoryStatus defines the observed state of Repository
message RepositoryStatus {
  // ConditionedStatus provides the status of the Repository using conditions
  optional github.com.pkgserver_dev.pkgserver.apis.condition.ConditionedStatus conditionedStatus = 1;
}

