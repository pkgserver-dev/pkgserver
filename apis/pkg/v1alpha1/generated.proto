/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.pkgserver_dev.pkgserver.apis.pkg.v1alpha1;

import "github.com/pkgserver-dev/pkgserver/apis/condition/generated.proto";
import "github.com/pkgserver-dev/pkgserver/apis/pkgrevid/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/pkgserver-dev/pkgserver/apis/pkg/v1alpha1";

// 	PackageRevision is the Schema for the PackageRevision API
//
// +k8s:openapi-gen=true
message PackageRevision {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PackageRevisionSpec spec = 2;

  optional PackageRevisionStatus status = 3;
}

message PackageRevisionApproval {
}

message PackageRevisionDependencies {
  // Summary Error in case an error was discovered
  optional string error = 1;

  // Errors define the detailed error per reference
  repeated PackageRevisionDependencyError errors = 2;

  // Warnings define the detailed warning per reference
  repeated PackageRevisionDependencyError warnings = 3;

  // Dependencies define the dependency details per reference
  repeated PackageRevisionDependency dependencies = 4;
}

message PackageRevisionDependency {
  // Type defines the type of dependency we refer to
  optional string type = 1;

  // Reference the dependency is sourced from (apiversion, kind, namespace, name)
  optional k8s.io.api.core.v1.ObjectReference ref = 2;

  // PackageDependencies define the package dependencies the reference depend upon (repository, realm, package, (revision)
  repeated github.com.pkgserver_dev.pkgserver.apis.pkgrevid.Upstream packageDependencies = 3;

  // RuntimeDependencies define the runtime dependencies the reference depend upon (apiversion, kind, namespace, name)
  repeated k8s.io.api.core.v1.ObjectReference runtimeDependencies = 4;
}

message PackageRevisionDependencyError {
  // Reference the error is sourced from (apiversion, kind, namespace, name)
  optional k8s.io.api.core.v1.ObjectReference ref = 1;

  // Reason describes the reason why the dependency failed
  optional string reason = 2;
}

// PackageRevisionList contains a list of PackageRevisions
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message PackageRevisionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated PackageRevision items = 2;
}

// 	PackageRevisionResource is the Schema for the PackageRevisionResource API
//
// +k8s:openapi-gen=true
message PackageRevisionResources {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PackageRevisionResourcesSpec spec = 2;

  optional PackageRevisionResourcesStatus status = 3;
}

// PackageRevisionResourceList contains a list of PackageRevisionResources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message PackageRevisionResourcesList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated PackageRevisionResources items = 2;
}

// PackageRevisionResourcesSpec defines the desired state of PackageRevisionResources
message PackageRevisionResourcesSpec {
  optional github.com.pkgserver_dev.pkgserver.apis.pkgrevid.PackageRevID packageRevID = 6;

  // Resources define the content of the resources key is the name of the KRM file,
  // value defines the the content of the KRM reource
  map<string, string> resources = 1;
}

// PackageRevisionResourcesStatus defines the observed state of PackageRevisionResources
message PackageRevisionResourcesStatus {
  // ConditionedStatus provides the status of the Readiness using conditions
  // if the condition is true the other attributes in the status are meaningful
  optional github.com.pkgserver_dev.pkgserver.apis.condition.ConditionedStatus conditionedStatus = 1;
}

// PackageRevisionSpec defines the desired state of PackageRevision
message PackageRevisionSpec {
  optional github.com.pkgserver_dev.pkgserver.apis.pkgrevid.PackageRevID packageRevID = 1;

  // Lifecycle defines the lifecycle of the resource
  optional string lifecycle = 2;

  // UpdatePolicy is the policy used to update resources
  // Loose updates the resources w/o removing the other entries in the package
  // strict updates the resources and removes unnessesary entries in the package
  optional string updatePolicy = 3;

  // Task is the task to be performed when creating this package revisision
  repeated Task tasks = 4;

  // ReadinessGates define the conditions that need to be acted upon before considering the PackageRevision
  // ready for approval
  repeated github.com.pkgserver_dev.pkgserver.apis.condition.ReadinessGate readinessGates = 5;

  // Upstream identifies the upstream package this package is originated from
  optional github.com.pkgserver_dev.pkgserver.apis.pkgrevid.Upstream upstream = 6;

  // Inputs define the inputs defined for the PackageContext
  // +kubebuilder:pruning:PreserveUnknownFields
  repeated k8s.io.apimachinery.pkg.runtime.RawExtension inputs = 7;
}

// PackageRevisionStatus defines the observed state of PackageRevision
message PackageRevisionStatus {
  // ConditionedStatus provides the status of the Readiness using conditions
  // if the condition is true the other attributes in the status are meaningful
  optional github.com.pkgserver_dev.pkgserver.apis.condition.ConditionedStatus conditionedStatus = 1;

  // PublishedBy is the identity of the user who approved the packagerevision.
  optional string publishedBy = 2;

  // PublishedAt is the time when the packagerevision were approved.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time publishTimestamp = 3;

  optional PackageRevisionDependencies dependencies = 4;
}

message Task {
  optional string type = 1;
}

